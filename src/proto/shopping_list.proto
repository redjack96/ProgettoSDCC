// version of protocol buffer used
syntax = "proto3";

option go_package = ".;proto_generated";

// package name for the buffer will be used later
package shopping_list;

// service which can be executed
// Important: each method can have only one input and one output!!!
service ShoppingList {
  rpc AddProductToList(Product) returns (Response);
  rpc RemoveProductFromList(ProductRemove) returns (Response);
  rpc UpdateProductInList(ProductUpdate) returns (Response);
  rpc AddProductToCart(ProductKey) returns (Response);
  rpc RemoveProductFromCart(ProductKey) returns (Response);
  rpc GetList(GetListRequest) returns (ProductList);
  rpc BuyAllProductsInCart(BuyRequest) returns (Response);
}

enum ProductType {
  Meat = 0;
  Fish = 1;
  Fruit = 2;
  Vegetable = 3;
  Drink = 4;
  Other = 5;
}

enum Unit {
  Bottle = 0;
  Packet = 1;
  Kg = 2;
  Grams = 3;
}

message ProductKey {
  string productName = 1;
  int32 productUnit = 2;
  int32 productType = 3;
}

message ProductUpdate {
  string productId = 1;
  string field = 2; // for update
  string value = 3; // for update
}

message ProductRemove {
    string productName = 1;
}

message Timestamp {
  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  int64 seconds = 1;

  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive.
  int32 nanos = 2;
}

//message ProductId {
//  string productId = 1;
//  string productName = 2;
//}

// argument
message Product {
  string productName = 1;
  ProductType type = 2;
  Unit unit = 3;
  int32 quantity = 4;
  bool addedToCart = 5;
  bool checkedOut = 6;
  Timestamp expiration = 7;
}

message ListId {
    int64 listId = 1;
}
// shopping List
message ProductList {
    ListId id = 1;
    string name = 2;
    repeated Product products = 3; // list of products
}

message GetListRequest {}
message BuyRequest {}
message Response {
  string msg = 1; // "ok" se ha successo, altrimenti l'errore e il messaggio di errore.
}