// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto_generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShoppingListClient is the client API for ShoppingList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShoppingListClient interface {
	AddProductToList(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Response, error)
	RemoveProductFromList(ctx context.Context, in *ProductKey, opts ...grpc.CallOption) (*Response, error)
	UpdateProductInList(ctx context.Context, in *ProductUpdate, opts ...grpc.CallOption) (*Response, error)
	AddProductToCart(ctx context.Context, in *ProductKey, opts ...grpc.CallOption) (*Response, error)
	RemoveProductFromCart(ctx context.Context, in *ProductKey, opts ...grpc.CallOption) (*Response, error)
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*ProductList, error)
	BuyAllProductsInCart(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*Response, error)
}

type shoppingListClient struct {
	cc grpc.ClientConnInterface
}

func NewShoppingListClient(cc grpc.ClientConnInterface) ShoppingListClient {
	return &shoppingListClient{cc}
}

func (c *shoppingListClient) AddProductToList(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/shopping_list.ShoppingList/AddProductToList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListClient) RemoveProductFromList(ctx context.Context, in *ProductKey, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/shopping_list.ShoppingList/RemoveProductFromList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListClient) UpdateProductInList(ctx context.Context, in *ProductUpdate, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/shopping_list.ShoppingList/UpdateProductInList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListClient) AddProductToCart(ctx context.Context, in *ProductKey, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/shopping_list.ShoppingList/AddProductToCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListClient) RemoveProductFromCart(ctx context.Context, in *ProductKey, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/shopping_list.ShoppingList/RemoveProductFromCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*ProductList, error) {
	out := new(ProductList)
	err := c.cc.Invoke(ctx, "/shopping_list.ShoppingList/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingListClient) BuyAllProductsInCart(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/shopping_list.ShoppingList/BuyAllProductsInCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShoppingListServer is the server API for ShoppingList service.
// All implementations must embed UnimplementedShoppingListServer
// for forward compatibility
type ShoppingListServer interface {
	AddProductToList(context.Context, *Product) (*Response, error)
	RemoveProductFromList(context.Context, *ProductKey) (*Response, error)
	UpdateProductInList(context.Context, *ProductUpdate) (*Response, error)
	AddProductToCart(context.Context, *ProductKey) (*Response, error)
	RemoveProductFromCart(context.Context, *ProductKey) (*Response, error)
	GetList(context.Context, *GetListRequest) (*ProductList, error)
	BuyAllProductsInCart(context.Context, *BuyRequest) (*Response, error)
	mustEmbedUnimplementedShoppingListServer()
}

// UnimplementedShoppingListServer must be embedded to have forward compatible implementations.
type UnimplementedShoppingListServer struct {
}

func (UnimplementedShoppingListServer) AddProductToList(context.Context, *Product) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductToList not implemented")
}
func (UnimplementedShoppingListServer) RemoveProductFromList(context.Context, *ProductKey) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProductFromList not implemented")
}
func (UnimplementedShoppingListServer) UpdateProductInList(context.Context, *ProductUpdate) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductInList not implemented")
}
func (UnimplementedShoppingListServer) AddProductToCart(context.Context, *ProductKey) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductToCart not implemented")
}
func (UnimplementedShoppingListServer) RemoveProductFromCart(context.Context, *ProductKey) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProductFromCart not implemented")
}
func (UnimplementedShoppingListServer) GetList(context.Context, *GetListRequest) (*ProductList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedShoppingListServer) BuyAllProductsInCart(context.Context, *BuyRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyAllProductsInCart not implemented")
}
func (UnimplementedShoppingListServer) mustEmbedUnimplementedShoppingListServer() {}

// UnsafeShoppingListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShoppingListServer will
// result in compilation errors.
type UnsafeShoppingListServer interface {
	mustEmbedUnimplementedShoppingListServer()
}

func RegisterShoppingListServer(s grpc.ServiceRegistrar, srv ShoppingListServer) {
	s.RegisterService(&ShoppingList_ServiceDesc, srv)
}

func _ShoppingList_AddProductToList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServer).AddProductToList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopping_list.ShoppingList/AddProductToList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServer).AddProductToList(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingList_RemoveProductFromList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServer).RemoveProductFromList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopping_list.ShoppingList/RemoveProductFromList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServer).RemoveProductFromList(ctx, req.(*ProductKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingList_UpdateProductInList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServer).UpdateProductInList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopping_list.ShoppingList/UpdateProductInList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServer).UpdateProductInList(ctx, req.(*ProductUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingList_AddProductToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServer).AddProductToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopping_list.ShoppingList/AddProductToCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServer).AddProductToCart(ctx, req.(*ProductKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingList_RemoveProductFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServer).RemoveProductFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopping_list.ShoppingList/RemoveProductFromCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServer).RemoveProductFromCart(ctx, req.(*ProductKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingList_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopping_list.ShoppingList/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingList_BuyAllProductsInCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingListServer).BuyAllProductsInCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopping_list.ShoppingList/BuyAllProductsInCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingListServer).BuyAllProductsInCart(ctx, req.(*BuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShoppingList_ServiceDesc is the grpc.ServiceDesc for ShoppingList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShoppingList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shopping_list.ShoppingList",
	HandlerType: (*ShoppingListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProductToList",
			Handler:    _ShoppingList_AddProductToList_Handler,
		},
		{
			MethodName: "RemoveProductFromList",
			Handler:    _ShoppingList_RemoveProductFromList_Handler,
		},
		{
			MethodName: "UpdateProductInList",
			Handler:    _ShoppingList_UpdateProductInList_Handler,
		},
		{
			MethodName: "AddProductToCart",
			Handler:    _ShoppingList_AddProductToCart_Handler,
		},
		{
			MethodName: "RemoveProductFromCart",
			Handler:    _ShoppingList_RemoveProductFromCart_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ShoppingList_GetList_Handler,
		},
		{
			MethodName: "BuyAllProductsInCart",
			Handler:    _ShoppingList_BuyAllProductsInCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shopping_list.proto",
}
