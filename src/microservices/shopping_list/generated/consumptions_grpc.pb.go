// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto_generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EstimatorClient is the client API for Estimator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EstimatorClient interface {
	// This function should receive and return a stream of object
	//  rpc Predict(stream BoughtProduct) returns (stream BuyMore);
	Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictedDataList, error)
	TrainModel(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error)
}

type estimatorClient struct {
	cc grpc.ClientConnInterface
}

func NewEstimatorClient(cc grpc.ClientConnInterface) EstimatorClient {
	return &estimatorClient{cc}
}

func (c *estimatorClient) Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictedDataList, error) {
	out := new(PredictedDataList)
	err := c.cc.Invoke(ctx, "/consumptions.Estimator/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimatorClient) TrainModel(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error) {
	out := new(TrainResponse)
	err := c.cc.Invoke(ctx, "/consumptions.Estimator/TrainModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EstimatorServer is the server API for Estimator service.
// All implementations must embed UnimplementedEstimatorServer
// for forward compatibility
type EstimatorServer interface {
	// This function should receive and return a stream of object
	//  rpc Predict(stream BoughtProduct) returns (stream BuyMore);
	Predict(context.Context, *PredictRequest) (*PredictedDataList, error)
	TrainModel(context.Context, *TrainRequest) (*TrainResponse, error)
	mustEmbedUnimplementedEstimatorServer()
}

// UnimplementedEstimatorServer must be embedded to have forward compatible implementations.
type UnimplementedEstimatorServer struct {
}

func (UnimplementedEstimatorServer) Predict(context.Context, *PredictRequest) (*PredictedDataList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedEstimatorServer) TrainModel(context.Context, *TrainRequest) (*TrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainModel not implemented")
}
func (UnimplementedEstimatorServer) mustEmbedUnimplementedEstimatorServer() {}

// UnsafeEstimatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EstimatorServer will
// result in compilation errors.
type UnsafeEstimatorServer interface {
	mustEmbedUnimplementedEstimatorServer()
}

func RegisterEstimatorServer(s grpc.ServiceRegistrar, srv EstimatorServer) {
	s.RegisterService(&Estimator_ServiceDesc, srv)
}

func _Estimator_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimatorServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consumptions.Estimator/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimatorServer).Predict(ctx, req.(*PredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Estimator_TrainModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimatorServer).TrainModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consumptions.Estimator/TrainModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimatorServer).TrainModel(ctx, req.(*TrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Estimator_ServiceDesc is the grpc.ServiceDesc for Estimator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Estimator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consumptions.Estimator",
	HandlerType: (*EstimatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _Estimator_Predict_Handler,
		},
		{
			MethodName: "TrainModel",
			Handler:    _Estimator_TrainModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consumptions.proto",
}
