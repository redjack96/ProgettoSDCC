// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto_generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EstimatorClient is the client API for Estimator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EstimatorClient interface {
	// This function should receive and return a stream of object
	Predict(ctx context.Context, opts ...grpc.CallOption) (Estimator_PredictClient, error)
}

type estimatorClient struct {
	cc grpc.ClientConnInterface
}

func NewEstimatorClient(cc grpc.ClientConnInterface) EstimatorClient {
	return &estimatorClient{cc}
}

func (c *estimatorClient) Predict(ctx context.Context, opts ...grpc.CallOption) (Estimator_PredictClient, error) {
	stream, err := c.cc.NewStream(ctx, &Estimator_ServiceDesc.Streams[0], "/consumptions.Estimator/Predict", opts...)
	if err != nil {
		return nil, err
	}
	x := &estimatorPredictClient{stream}
	return x, nil
}

type Estimator_PredictClient interface {
	Send(*BoughtProduct) error
	Recv() (*BuyMore, error)
	grpc.ClientStream
}

type estimatorPredictClient struct {
	grpc.ClientStream
}

func (x *estimatorPredictClient) Send(m *BoughtProduct) error {
	return x.ClientStream.SendMsg(m)
}

func (x *estimatorPredictClient) Recv() (*BuyMore, error) {
	m := new(BuyMore)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EstimatorServer is the server API for Estimator service.
// All implementations must embed UnimplementedEstimatorServer
// for forward compatibility
type EstimatorServer interface {
	// This function should receive and return a stream of object
	Predict(Estimator_PredictServer) error
	mustEmbedUnimplementedEstimatorServer()
}

// UnimplementedEstimatorServer must be embedded to have forward compatible implementations.
type UnimplementedEstimatorServer struct {
}

func (UnimplementedEstimatorServer) Predict(Estimator_PredictServer) error {
	return status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedEstimatorServer) mustEmbedUnimplementedEstimatorServer() {}

// UnsafeEstimatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EstimatorServer will
// result in compilation errors.
type UnsafeEstimatorServer interface {
	mustEmbedUnimplementedEstimatorServer()
}

func RegisterEstimatorServer(s grpc.ServiceRegistrar, srv EstimatorServer) {
	s.RegisterService(&Estimator_ServiceDesc, srv)
}

func _Estimator_Predict_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EstimatorServer).Predict(&estimatorPredictServer{stream})
}

type Estimator_PredictServer interface {
	Send(*BuyMore) error
	Recv() (*BoughtProduct, error)
	grpc.ServerStream
}

type estimatorPredictServer struct {
	grpc.ServerStream
}

func (x *estimatorPredictServer) Send(m *BuyMore) error {
	return x.ServerStream.SendMsg(m)
}

func (x *estimatorPredictServer) Recv() (*BoughtProduct, error) {
	m := new(BoughtProduct)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Estimator_ServiceDesc is the grpc.ServiceDesc for Estimator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Estimator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consumptions.Estimator",
	HandlerType: (*EstimatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Predict",
			Handler:       _Estimator_Predict_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "consumptions.proto",
}
