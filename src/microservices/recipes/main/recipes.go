package main

import (
	"context"
	"fmt"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"log"
	"net"
	pb "recipes.microservice/generated"
	props "recipes.microservice/main/util"
)

// this struct implements RecipesServer interface
type serverRecipes struct {
	pb.UnimplementedRecipesServer // generated by protoc. It is an Anonymous Field, with the same name as the type (pb.UnimplementedGreeterServer).
}

func (s *serverRecipes) GetRecipesFromIngredients(ctx context.Context, ingredients *pb.IngredientsList) (*pb.RecipeList, error) {
	recipes := make([]*pb.Recipe, 0)

	x := &pb.RecipeList{
		Recipes: recipes,
	}
	return x, nil
}

func (s *serverRecipes) GetRecipesFromPantry(ctx context.Context, request *pb.EmptyRequest) (*pb.RecipeList, error) {
	recipes := make([]*pb.Recipe, 0)

	// Call GetPantry of StorageService to retrieve available products
	conn, err := grpc.Dial("ProductStorageService:8002", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalln("Error connecting to ProductStorageService", err)
	}
	client := pb.NewProductStorageClient(conn)
	pantry, err := client.GetPantry(context.Background(), &pb.PantryMessage{})
	log.Printf("pantry: %v", pantry)

	// Return recipes list
	x := &pb.RecipeList{
		Recipes: recipes,
	}
	return x, nil
}

//protoc --proto_path ../../proto --go_out generated --go-grpc_out generated ../../proto/*.proto
func main() {
	// Retrieve the properties from the file
	properties, _ := props.GetProperties()
	fmt.Printf("Properties %+v\n", properties)

	// Listen for incoming requests
	lis, err := net.Listen("tcp", fmt.Sprintf(":%d", properties.RecipesPort))
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}

	// Create server
	s := grpc.NewServer()
	pb.RegisterRecipesServer(s, &serverRecipes{}) // this is a pointer to a newly created server struct that implements ShoppingListServer
	log.Printf("server listening at %v", lis.Addr())

	// this is like C's
	// int err;
	// if ((err = s.serve(lis) != ERROR_CONSTANT) {}
	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
	fmt.Println("here we give hints. What do you need more?")
}
