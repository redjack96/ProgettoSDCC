# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import shopping_list_pb2 as shopping__list__pb2


class NotificationStub(object):
    """service which can be executed
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NotifyDeadline = channel.unary_unary(
                '/notifications.Notification/NotifyDeadline',
                request_serializer=shopping__list__pb2.Product.SerializeToString,
                response_deserializer=shopping__list__pb2.Response.FromString,
                )
        self.NotifyRunOut = channel.unary_unary(
                '/notifications.Notification/NotifyRunOut',
                request_serializer=shopping__list__pb2.Product.SerializeToString,
                response_deserializer=shopping__list__pb2.Response.FromString,
                )


class NotificationServicer(object):
    """service which can be executed
    """

    def NotifyDeadline(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyRunOut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NotificationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NotifyDeadline': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyDeadline,
                    request_deserializer=shopping__list__pb2.Product.FromString,
                    response_serializer=shopping__list__pb2.Response.SerializeToString,
            ),
            'NotifyRunOut': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyRunOut,
                    request_deserializer=shopping__list__pb2.Product.FromString,
                    response_serializer=shopping__list__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'notifications.Notification', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Notification(object):
    """service which can be executed
    """

    @staticmethod
    def NotifyDeadline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/notifications.Notification/NotifyDeadline',
            shopping__list__pb2.Product.SerializeToString,
            shopping__list__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyRunOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/notifications.Notification/NotifyRunOut',
            shopping__list__pb2.Product.SerializeToString,
            shopping__list__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
