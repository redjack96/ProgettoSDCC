version: '3.1'
# TODO: per evitare che le porte siano hardcoded, possiamo usare il parametro env_file
#  env_file:
#    - my-env-file
# poi possiamo inserire nel file una variabile d'ambiente PORT e possiamo accedere alla porta in questo modo:
#  ports:
#    - ${PORT}:${PORT}
services:
  # OUR MICROSERVICES ----------------------------------------------------------------------------------
  # --- FRONT-END
  #  frontend:
  #    image: "web_ui"
  #    container_name: "SDCCShoppingList"
  #    build: "src/frontend"
  #    ports:
  #      - "3000:3000"
  # --- API-GATEWAY
  api_gateway:
    image: "api_gateway"
    container_name: "ApiGateway"
    build: "src/api_gateway"
    volumes:
      - "./config.properties:/api_gateway/config.properties"
      - "./src/proto:/api_gateway/proto"
    ports:
      - "8007:8007"
    depends_on:
      - shopping_list
      - product_storage
  #    - notifications
  #      - recipes
  #      - consumptions
  #      - summary
  # --- APP-MICROSERVICES
  shopping_list:
    image: "shopping_list"
    container_name: "ShoppingListService" # attenzione potrebbe dare problemi se replichiamo
    build: "src/microservices/shopping_list"
    volumes:
      - "./config.properties:/usr/src/shopping_list/config.properties"
      - "./src/proto:/usr/src/shopping_list/proto"
    depends_on:
      - mongo
  product_storage:
    image: "product_storage"
    container_name: "ProductStorageService"
    depends_on:
      - kafka
    build: "src/microservices/product_storage"
    environment:
      TOPIC: notification
      ENVIRONMENT: local
      INTERNAL_KAFKA_ADDR: 'kafka:9092'
    volumes:
      - "./config.properties:/product_storage/config.properties"
      - "./src/proto:/product_storage/proto"
      - "./src/microservices/product_storage/test.db:/product_storage/test.db"
  notifications:
    image: "notifications"
    container_name: "NotificationsService"
    build: "src/microservices/notifications"
    #    environment:
    #      ENVIRONMENT: local
    #      INTERNAL_KAFKA_ADDR: 'kafka:9092'
    volumes:
      - "./src/proto:/notifications/proto"
      - "./config.properties:/notifications/src/main/resources/config.properties"
    depends_on:
      - product_storage

  summary:
    image: summary
    container_name: "SummaryService"
    build: "src/microservices/summary"
    volumes:
      - "./src/proto:/summary/proto"
      - "./config.properties:/summary/src/main/resources/config.properties"

        
    #  recipes:
    #    image: recipes
    #    container_name: "RecipesService"
    #    build: "src/microservices/recipes"
    #    volumes:
    #      - "./config.properties:/usr/src/recipes"
    #      - "./src/proto:/usr/src/recipes/proto"
    #  consumptions:
    #    image: consumptions
    #    container_name: "ConsumptionService"
    #    build: "src/microservices/consumptions"
    #    volumes:
    #      - "./config.properties:/usr/src/consumptions"
    #      - "./src/proto:/usr/src/consumptions/proto"

  # KAFKA + ZOOKEEPER ---------------------------------------------------------------
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    # CREARE TOPIC
    # docker exec -it kafka /opt/bitnami/kafka/bin/kafka-topics.sh --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic notification
    image: bitnami/kafka:latest
    ports:
      - '9092:9092' # internal
      - '29092:29092' # localhost
    container_name: kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      #      - KAFKA_CREATE_TOPICS= 'test:1:1'
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:29092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_LOG4J_LOGGERS="kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    depends_on:
      - zookeeper

  #  init-kafka:
  #      image: confluentinc/cp-kafka:latest
  #      depends_on:
  #        - kafka
  #      entrypoint: ['/bin/sh', '-c' ]
  #      command: |
  #        "
  #        # blocks until kafka is reachable
  #        kafka-topics --bootstrap-server kafka:9092 --list
  #
  #        echo -e 'Creating kafka topics'
  #        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic notification --replication-factor 1 --partitions 1
  #        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic client-alert --replication-factor 1 --partitions 1
  #
  #        echo -e 'Successfully created the following topics'
  #        kafka-topics --bootstrap-server kafka:9092 --list
  #        "
  
  # database mongodb.
  mongo:
    image: mongo
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    # command: mongod

  # # UI per amministrare MongoDB
  mongo-express:
    image: mongo-express
    restart: always
    container_name: mongo-site
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    depends_on:
      - mongo
