version: '3.1'
# TODO: per evitare che le porte siano hardcoded, possiamo usare il parametro env_file
#  env_file:
#    - my-env-file
# poi possiamo inserire nel file una variabile d'ambiente PORT e possiamo accedere alla porta in questo modo:
#  ports:
#    - ${PORT}:${PORT}
services:
  # OUR MICROSERVICES ----------------------------------------------------------------------------------
  # --- FRONT-END ONLY FOR RAPID DEVELOPMENT
  # TODO: SOLO QUI, BASTA CAMBIARE IL CODICE JS E L'APP SI AGGIORNERA' AUTOMATICAMENTE!
#  frontend_dev:
#    image: "node:19-alpine"
#    container_name: "frontend_dev"
#    working_dir: /app
#    volumes:
#      - "./src/frontend:/app"
#    ports:
#      - "3000:3000"
#    command: sh -c "npm run start"
#    depends_on:
#      - api_gateway
#      - shopping_list

  frontend:
    image: "web_ui"
    container_name: "SDCCShoppingList"
    build: "src/frontend"
    ports:
      - "3000:3000"
     # only for development
    volumes:
      - "./src/frontend:/app"


  # --- API-GATEWAY
  api_gateway:
    image: "api_gateway"
    container_name: "ApiGateway"
    build:
      dockerfile: "../docker/Dockerfile.apigateway"
      context: "src"
    volumes:
      - "./config.properties:/api_gateway/config.properties"
    expose:
      - "8007"
    ports:
      - "8007:8007"
#    depends_on:
#      - shopping_list
#      - product_storage
#      - consumptions
#      - summary
       #      - notifications
        #      - recipes

  # --- APP-MICROSERVICES
  shopping_list:
    image: "shopping_list"
    container_name: "ShoppingListService" # attenzione potrebbe dare problemi se replichiamo
    build:
      dockerfile: "../docker/Dockerfile.shoppinglist"
      context: "src"
    volumes:
      - "./config.properties:/usr/src/shopping_list/config.properties"
    depends_on:
      - mongo

  product_storage:
    image: "product_storage"
    container_name: "ProductStorageService"
    depends_on:
      - kafka
    build:
      dockerfile: "../docker/Dockerfile.productstorage"
      context: "src"
    environment:
      TOPIC: notification
      ENVIRONMENT: local
      INTERNAL_KAFKA_ADDR: 'kafka:9092'
    volumes:
      - "./config.properties:/product_storage/config.properties"
      - "./src/microservices/product_storage/test.db:/product_storage/test.db"

  notifications:
    image: "notifications"
    container_name: "NotificationsService"
    build: "src/microservices/notifications"
    #    environment:
    #      ENVIRONMENT: local
    #      INTERNAL_KAFKA_ADDR: 'kafka:9092'
    volumes:
      - "./src/proto:/notifications/proto"
      - "./config.properties:/notifications/src/main/resources/config.properties"
    depends_on:
      - product_storage

  summary:
    image: summary
    container_name: "SummaryService"
    build:
      dockerfile: "../docker/Dockerfile.summary"
      context: "src"
    volumes:
      - "./config.properties:/summary/src/main/resources/config.properties"
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
    depends_on:
      - influxdb
      - consumptions

  recipes:
    image: "recipes"
    container_name: "RecipesService"
    build:
      dockerfile: "../docker/Dockerfile.recipes"
      context: "src"
    volumes:
      - "./config.properties:/usr/src/recipes/config.properties"
    depends_on:
      - redis

  consumptions:
    image: consumptions
    container_name: "ConsumptionService"
    restart: always
    build:
      dockerfile: "../docker/Dockerfile.consumptions"
      context: "src"
    volumes:
      - "./config.properties:/usr/src/consumptions/config.properties"
    depends_on:
      - cassandra

  # KAFKA + ZOOKEEPER ---------------------------------------------------------------
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    # CREARE TOPIC
    # docker exec -it kafka /opt/bitnami/kafka/bin/kafka-topics.sh --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 --topic notification
    image: bitnami/kafka:latest
    ports:
      - '9092:9092' # internal
      - '29092:29092' # localhost
    container_name: kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:29092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_LOG4J_LOGGERS="kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    depends_on:
      - zookeeper
  
  # DATABASES ------------------------------------------------------------------------
  mongo:
    image: mongo
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  # # UI per amministrare MongoDB
  mongo-express:
    image: mongo-express
    restart: always
    container_name: mongo-site
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    depends_on:
      - mongo

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    ports:
      - '8086:8086'
    volumes:
      - influxdb-storage:/var/lib/influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: password
      DOCKER_INFLUXDB_INIT_ORG: myorg
      DOCKER_INFLUXDB_INIT_BUCKET: krakend
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: token

  redis:
    image: redis:latest
    container_name: redis-cache
    ports:
      - '6379:6379'

  cassandra:
    image: cassandra:latest
    container_name: cassandra
    ports:
      - '9042:9042'
    volumes:
      - 'cassandra_data:/appdata'
    environment:
#      - CASSANDRA_SEEDS=cassandra
#      - CASSANDRA_PASSWORD_SEEDER=yes
#      - CASSANDRA_PASSWORD=cassandra
      - CASSANDRA_START_RPC=true
      - CASSANDRA_CLUSTER_NAME=CassandraCluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_DC=datacenter

volumes:
  influxdb-storage:
  cassandra_data:
    driver: local
