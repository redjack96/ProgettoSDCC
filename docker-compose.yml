version: '3.1'
# TODO: per evitare che le porte siano hardcoded, possiamo usare il parametro env_file
#  env_file:
#    - my-env-file
# poi possiamo inserire nel file una variabile d'ambiente PORT e possiamo accedere alla porta in questo modo:
#  ports:
#    - ${PORT}:${PORT}
services:
  # I nostri containers
  frontend:
    image: "web_ui"
    container_name: "SDCCShoppingList"
    build: "src/frontend"
    ports:
      - "3000:3000"
  api_gateway:
    image: "api_gateway"
    container_name: "API Gateway"
    build: "src/api_gateway"
    ports:
      - "8007:8007"
    depends_on:
      - shopping_list
#      - product_storage
#      - recipes
#      - consumptions
#      - notifications
#      - summary
  shopping_list:
    image: "shopping_list"
    container_name: "ShoppingListService" # attenzione potrebbe dare problemi se replichiamo
    build: "src/microservices/shopping_list"
    volumes: 
      - "./src/microservices/shopping_list:/usr/src/shopping_list"
      - "./config.properties:/usr/src/shopping_list/config.properties"
  product_storage:
    image: "product_storage"
    container_name: "ProductStorageService"
    build: "src/microservices/product_storage"
    #crea un bind-mount per sviluppare facilmente (cos√¨ modifiche nel codice si ripercuotono anche nel container). Quando si rilascia va eliminato e sostituito con un COPY nel Dockerfile 
    #il secondo bind-mount serve a copiare il file di configurazione
    volumes:
      - "./src/microservices/product_storage:/usr/src/product_storage"
      - "./config.properties:/usr/src/product_storage/config.properties"
  # recipes:
  #   image: recipes
  #   container_name: "RecipesService"
  #   build: "src/microservices/recipes"
  #   volumes: 
  #     - "src/microservices/recipes:/usr/src/recipes"
  #     - "./config.properties:/usr/src/recipes"
  # consumptions:
  #   image: consumptions
  #   container_name: "ConsumptionService"
  #   build: "src/microservices/consumptions"
  #   volumes:
  #     - "src/microservices/consumptions:/usr/src/consumptions"
  #     - "./config.properties:/usr/src/consumptions"
  # notifications:
  #   image: notifications
  #   container_name: "NotificationsService"
  #   build: "src/microservices/notifications"
  #   volumes:
  #     - "src/microservices/notifications:/usr/src/notifications"
  #     - "./config.properties:/usr/src/notifications"
  # summary:
  #   image: summary
  #   container_name: "SummaryService"
  #   build: "src/microservices/summary"
  #   volumes:
  #     - "src/microservices/summary:/usr/src/summary"
  #     - "./config.properties:/usr/src/summary"
  
  # database mongodb. 
  # Todo: aggiungere questo database all'interno del microservizio product_storage
  mongo:
    image: mongo
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    command: mongod

  # # UI per amministrare MongoDB
  mongo-express:
    image: mongo-express
    container_name: mongo-site
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    depends_on:
      - mongo
