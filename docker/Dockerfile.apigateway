# Here we do a multi-build dockerfile to reduce final container size
# first we start from rust image and install our app
FROM rust:latest as builder

RUN rustup target add x86_64-unknown-linux-musl
RUN apt update && apt install -y musl-tools musl-dev
RUN apt-get update && apt-get install -y protobuf-compiler && rm -rf /var/lib/apt/lists/*

# create a new empty shell project
RUN USER=root cargo new api_gateway
WORKDIR /api_gateway

# copy over your manifests
# watch out: the build context is from src/ directory!!!
COPY api_gateway/Cargo.lock ./Cargo.lock
COPY api_gateway/Cargo.toml ./Cargo.toml
COPY api_gateway/src/lib.rs ./src/lib.rs
COPY api_gateway/build.rs ./build.rs
COPY proto/shopping_list.proto ./shopping_list.proto
COPY proto/product_storage.proto ./product_storage.proto
COPY proto/recipes.proto ./recipes.proto
COPY proto/consumptions.proto ./consumptions.proto
COPY proto/notifications.proto ./notifications.proto
COPY proto/summary.proto ./summary.proto
# ho gi√† provato a mettere dopo i proto... niente vanno messi qua

# this build step will cache your dependencies
RUN cargo build --target x86_64-unknown-linux-musl --release --locked
RUN rm src/*.rs

# copy your source tree (watch out the build context is /src)
COPY api_gateway/src ./src

# build for release
RUN rm ./target/x86_64-unknown-linux-musl/release/deps/api_gateway*
RUN cargo build --target x86_64-unknown-linux-musl --bin api_client --release --locked

FROM alpine as runner
WORKDIR /api_gateway
COPY --from=builder /api_gateway/target/x86_64-unknown-linux-musl/release/api_client api_client

EXPOSE 8007

# set the startup command to run your binary
CMD /api_gateway/api_client