# Here we do a multi-build dockerfile to reduce final container size
# first we start from rust image and install our app
FROM rust:latest as builder

RUN rustup target add x86_64-unknown-linux-musl
RUN apt update && apt install -y musl-tools musl-dev
RUN apt-get update && apt-get install -y protobuf-compiler && rm -rf /var/lib/apt/lists/*

# create a new empty shell project
RUN USER=root cargo new product_storage
WORKDIR /product_storage

# copy over your manifests
COPY microservices/product_storage/Cargo.lock ./Cargo.lock
COPY microservices/product_storage/Cargo.toml ./Cargo.toml
COPY microservices/product_storage/src/lib.rs ./src/lib.rs
COPY microservices/product_storage/build.rs ./build.rs
COPY proto/shopping_list.proto ./shopping_list.proto
COPY proto/product_storage.proto ./product_storage.proto
COPY proto/recipes.proto ./recipes.proto
COPY proto/consumptions.proto ./consumptions.proto
COPY proto/notifications.proto ./notifications.proto
COPY proto/summary.proto ./summary.proto

# this build step will cache your dependencies
RUN cargo build --target x86_64-unknown-linux-musl --release
RUN rm src/*.rs

# copy your source tree
COPY microservices/product_storage/src ./src

# build for release
RUN rm ./target/x86_64-unknown-linux-musl/release/deps/product_storage*
RUN cargo build --target x86_64-unknown-linux-musl --bin product_storage --release

FROM alpine as runner
WORKDIR /product_storage
COPY --from=builder /product_storage/target/x86_64-unknown-linux-musl/release/product_storage product_storage

EXPOSE 8002

# set the startup command to run your binary
CMD /product_storage/product_storage